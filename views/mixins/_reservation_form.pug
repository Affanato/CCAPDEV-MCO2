mixin step1()
  .step.active#step1.content-box.text-center.p-4
    h1 Reserve Laboratory Table
    p.mb-4
        | Ready to book your lab seat? Just fill out the form with your needed laboratory.
        br
        | You'll get a confirmation as soon as your reservation is secured.
    .mb-4.d-flex.justify-content-center.gap-3.flex-wrap
      label(for="lab_select")
      select#lab_select.form-select.w-auto(name="lab" onchange="checkNextButton()")
        option(value="") ðŸ”¬ Select Laboratory
        option(value="GK101A") GK101A
        option(value="GK304A") GK304A
        option(value="GK304B") GK304B
        option(value="AG702") AG702
        option(value="AG1904") AG1904
        option(value="LS209") LS209
        option(value="LS311") LS311
    .mb-3
      label.checkbox-label
        input#anon_checkbox(type="checkbox" name="anon")
        |&nbsp; Make this reservation anonymous
    button#next-btn.main-btn.mt-3(onclick="nextStep()" disabled) Show Availability

mixin step2(timeSlots)
  .step#step2.content-box.text-center.p-4
    h1 Reserve Laboratory Table
    .selection-info
      strong Selected Laboratory: 
      span#selected-lab
    .date-header#date-header
      span#formatted-date
    .date-input-container
      label(for="date_select") 
      input#date_select.form-control.w-auto(type="date" name="resDate" onchange="updateDateHeader(); checkSubmitButton();")
    .d-flex.justify-content-center
      .step2-container
        .step2-content
          table.time-table#time-table
            thead 
              tr
                th Seat
                each timeSlot in timeSlots
                  th= timeSlot
            tbody#table-body
    .mt-3
      button.btn.btn-back(onclick="prevStep()") Back
      button#submit-btn.btn(onclick="submitForm()" disabled) Submit

mixin scriptBlock()
  script.
    let selectedCells = [];
    
    // Set default date to today
    document.addEventListener('DOMContentLoaded', function() {
      const today = new Date();
      const formattedDate = today.toISOString().split('T')[0];
      document.getElementById('date_select').value = formattedDate;
      document.getElementById('date_select').min = formattedDate; // Prevent selecting past dates
      createTableRows();
      checkNextButton();
      updateDateHeader(); // Update the date header on page load
    });
    
    function formatDate(dateString) {
      const date = new Date(dateString);
      const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      const months = ['January', 'February', 'March', 'April', 'May', 'June', 
                     'July', 'August', 'September', 'October', 'November', 'December'];
      
      const dayOfWeek = days[date.getDay()]; 
      const month = months[date.getMonth()];
      const day = date.getDate();
      const year = date.getFullYear();
      
      return `${dayOfWeek}, ${month} ${day}, ${year}`;
    }
    
    function updateDateHeader() {
      const dateSelect = document.getElementById('date_select');
      const dateHeader = document.getElementById('date-header');
      const formattedDateSpan = document.getElementById('formatted-date');
      
      if (dateSelect.value) {
        const formattedDate = formatDate(dateSelect.value);
        formattedDateSpan.textContent = formattedDate;
        dateHeader.classList.add('visible');
      } else {
        dateHeader.classList.remove('visible');
      }
    }
    
    function checkNextButton() {
      const labSelect = document.getElementById('lab_select');
      const nextBtn = document.getElementById('next-btn');
      
      // Enable next button only if lab is selected
      const hasLab = labSelect.value;
      nextBtn.disabled = !hasLab;
    }
    
    function checkSubmitButton() {
      const submitBtn = document.getElementById('submit-btn');
      const dateSelect = document.getElementById('date_select');
      
      // Enable submit button only if date is selected and at least one cell is selected
      const hasDate = dateSelect.value;
      const hasSelectedCells = Object.keys(selectedCells).length > 0;
      submitBtn.disabled = !(hasDate && hasSelectedCells);
    }
    
    function createTableRows() {
      const tableBody = document.getElementById('table-body');
      tableBody.innerHTML = ''; // Clear existing rows
      
      // Create seat rows (A1-A8 format for seats)
      for (let i = 1; i <= 8; i++) {
        const row = document.createElement('tr');
        const rowLabel = document.createElement('td');
        rowLabel.textContent = `A${i}`;
        row.appendChild(rowLabel);
        
        for (let j = 1; j <= 29; j++) {
          const cell = document.createElement('td');
          cell.dataset.row = i;
          cell.dataset.col = j;
          cell.dataset.seat = `A${i}`;
          cell.addEventListener('click', function() { selectCell(this); });
          cell.addEventListener("contextmenu", (event) => { 
            event.preventDefault(); 
            deselectCell(event.currentTarget); 
          });
          row.appendChild(cell);
        }
        tableBody.appendChild(row);
      }
    }
    
    function selectCell(clickedCell) {
      const row = parseInt(clickedCell.dataset.row);
      const col = parseInt(clickedCell.dataset.col);
      const seat = clickedCell.dataset.seat;
      const rowCells = document.querySelectorAll(`td[data-row="${row}"]`);
      
      // Select current cell and adjacent cells
      rowCells.forEach(cell => {
        const cellCol = parseInt(cell.dataset.col);
        if (cellCol === col || cellCol === col+1 || cellCol === col-1) {
          cell.classList.add('selected');
        }
      });
      
      selectedCells[row] = {
        seat: seat,
        timeSlot: col
      };
      checkSubmitButton();
    }
    
    function deselectCell(clickedCell) {
      const row = parseInt(clickedCell.dataset.row);
      const col = parseInt(clickedCell.dataset.col);
      const rowCells = document.querySelectorAll(`td[data-row="${row}"]`);
      
      rowCells.forEach(cell => {
        const cellCol = parseInt(cell.dataset.col);
        if (cellCol === col) {
          cell.classList.remove("selected");
        }
      });
      
      delete selectedCells[row];
      checkSubmitButton();
    }
    
    function nextStep() {
      const labSelect = document.getElementById('lab_select');
      
      if (labSelect.value) {
        const selectedLab = labSelect.value;
        
        document.getElementById('selected-lab').textContent = selectedLab;
        document.getElementById('step1').classList.remove('active');
        document.getElementById('step2').classList.add('active');
        
        // Update date header when moving to step 2
        updateDateHeader();
        
        // Reset selected cells when moving to step 2
        selectedCells = [];
        checkSubmitButton();
      }
    }
    
    function prevStep() {
      document.getElementById('step2').classList.remove('active');
      document.getElementById('step1').classList.add('active');
      
      // Clear selected cells when going back
      selectedCells = [];
      const selectedElements = document.querySelectorAll('.selected');
      selectedElements.forEach(element => {
        element.classList.remove('selected');
      });
    }
    
    function submitForm() {
      const labSelect = document.getElementById('lab_select');
      const dateSelect = document.getElementById('date_select');
      const anonCheckbox = document.getElementById('anon_checkbox');
      
      // Validate before submission
      if (!dateSelect.value) {
        alert('Please select a date before submitting.');
        return;
      }
      
      if (Object.keys(selectedCells).length === 0) {
        alert('Please select at least one time slot before submitting.');
        return;
      }
      
      // Create reservations for each selected cell
      const reservations = Object.values(selectedCells).map(cellData => ({
        seat: cellData.seat,
        lab: labSelect.value,
        resDate: new Date(dateSelect.value),
        anon: anonCheckbox.checked,
        timeSlot: cellData.timeSlot
      }));
      
      // Submit to server
      fetch('/reservations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          reservations: reservations
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          alert('Reservations submitted successfully!');
          // Reset form or redirect
          location.reload();
        } else {
          alert('Error submitting reservations: ' + data.message);
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Error submitting reservations. Please try again.');
      });
    }
